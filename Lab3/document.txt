There are five .cpp files in my implementation. main.cpp accepts parameters from the console and uses them to instantiate a cashier and lets it start its operation.
Cashier.cpp is the cashier class, which is responsible for loading all input files and selling commodities. Three vectors: VIPList, shoppingCardList and commodityList are used as naive data structures. Cashier::startOperate() contains logics for the cashier.
Firstly, it opens the purchase file and reads lines from the file. Each transaction (bill) will cause the while loop to loop once. currentVIPLevel is 0 by default and currentVIPIndex is -1 by default. To ensure a correct implementation, I choose to iterate the three vectors to find the VIP/ shopping card/ commodity with the intended ID. Taking vector indexes as IDs is a wrong implementation since IDs in the input file may not be sequential. After a VIP is found, currentVIPLevel and currentVIPIndex will be updated. 
originalBill is used to store the raw total price for a bill except for level 3 VIPs, whose originalBill stores the discounted price for a bill, for a simple implementation.
After originalBill is decided, a switch statement is used to do the discounting job as well as to calculate points according to the VIP's level. For a simple implementation, I used multiple ifs. The implementation is naive so I will omit tedious descriptions here.
Then it comes to adding calculated points to the VIP's account if the user is a VIP. After that, Cashier::checkOut is invoked to pay the bill if the user has a shopping card. Notice that the shopping card ID is checked. An error message will be printed if the customer should provide an invalid shopping card ID. Finally, the log is printed on the screen as required. I added some colors to the output to make it more distinct.